<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
 
   <!-- auto-config="true" 속성의 의미는  스프링 시큐리티에서 제공하는 로그인 페이지 사용 설정 -->
   <http use-expressions="true">
     <form-login login-page="/login" 
           authentication-failure-url="/login?login_error"   
           default-target-url="/boardAll"/> <!-- home 에서 로그인 성공 시 띄울 화면  -->
       <logout logout-success-url="/login"/><!-- 로그아웃 성공했을때 보여줄 페이지 지정 -->
     <intercept-url pattern="/" access="hasRole('ROLE_USER')"/> 
        <intercept-url pattern="/boardAll" access="hasRole('ROLE_USER')"/>
      <!-- <intercept-url pattern="/customer/noticeEdit.htm" access="ROLE_ADMIN"/>  -->
   </http>
   <!--intercept-url태그로 입력받은 설정을 사용해서 FilterSecurityInterceptor 필터를 생성 
       form-login 설정을 사용해서 포 ㅁ기반 로그인 요청을 처리하는 UsernamePasswordAuthenticationFilter를 생성한다. -->
    
    
    <!-- DB 를 이용한 인증 처리  -->
     <authentication-manager>
     <authentication-provider>
        <jdbc-user-service 
             data-source-ref="dataSource"
             users-by-username-query=
               "select m_id as username, m_password as password, 1 as  enabled  from member where m_id = ? "
             authorities-by-username-query= "select m_id as username, case when m_id='admin' then 'ROLE_ADMIN' else 'ROLE_USER' end as authority from member where m_id = ?"  
        />
     </authentication-provider>
   </authentication-manager>

</beans:beans>

